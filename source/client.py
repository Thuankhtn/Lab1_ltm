import socket
import time
import os

# C·∫•u h√¨nh Client
SERVER_IP = "127.0.0.1"
PORT = 12345
BUFFER_SIZE = 64000
MAX_ATTEMPTS = 5    # S·ªë l·∫ßn th·ª≠ l·∫°i n·∫øu m·∫•t g√≥i
# T·∫°o UDP socket
client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
def get_file_size(client_socket, filename, server_addr):
    """ Y√™u c·∫ßu Server g·ª≠i k√≠ch th∆∞·ªõc file tr∆∞·ªõc khi t·∫£i """
    request = f"GET_FILE_SIZE:{filename}"
    client_socket.sendto(request.encode(), server_addr)

    try:
        client_socket.settimeout(3.0)  # Timeout 3 gi√¢y ƒë·ªÉ tr√°nh treo
        data, _ = client_socket.recvfrom(1024)
        if data.startswith(b"FILE_SIZE:"):
            return int(data.decode().split(":")[1])  # Tr·∫£ v·ªÅ k√≠ch th∆∞·ªõc file (bytes)
        else:
            print(f" L·ªói: Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ Server ({data.decode()})")
            return None
    except socket.timeout:
        print(" L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Server")
        return None

def request_file_list():
    """ Y√™u c·∫ßu danh s√°ch file t·ª´ Server """
    client_socket.sendto("LIST_FILES".encode(), (SERVER_IP, PORT))
    data, _ = client_socket.recvfrom(BUFFER_SIZE)
    print("Danh s√°ch file c√≥ s·∫µn:", data.decode())

def request_file_chunk(filename, offset, size):
    """ Y√™u c·∫ßu t·∫£i m·ªôt ph·∫ßn file t·ª´ Server """
    request = f"REQUEST_FILE:{filename}:{offset}:{size}"
    client_socket.sendto(request.encode(), (SERVER_IP, PORT))

    data, _ = client_socket.recvfrom(BUFFER_SIZE + size)
    return data

def download_file(client_socket, server_filename, local_filename, file_size, server_addr):
    """ T·∫£i file t·ª´ Server nh∆∞ng l∆∞u v·ªõi t√™n kh√°c tr√™n Client """
    print(f" ƒêang t·∫£i {server_filename} ({file_size / (1024 * 1024):.2f} MB) v·ªÅ {local_filename}...")
    start_time = time.time()
    with open(local_filename, "wb") as output_file:
        for offset in range(0, file_size, BUFFER_SIZE):
            request = f"REQUEST_FILE:{server_filename}:{offset}:{BUFFER_SIZE}"
            client_socket.sendto(request.encode(), server_addr)

            try:
                chunk, _ = client_socket.recvfrom(BUFFER_SIZE + 256)

                if not chunk.startswith(b"FILE_CHUNK"):
                    raise ValueError(f" L·ªói: Chunk {offset} kh√¥ng h·ª£p l·ªá")

                parts = chunk.split(b":", 4)
                recv_offset = int(parts[2].decode())
                file_data = parts[4]

                output_file.seek(recv_offset)
                output_file.write(file_data)

                # G·ª≠i ACK x√°c nh·∫≠n
                ack = f"ACK:{server_filename}:{recv_offset}"
                client_socket.sendto(ack.encode(), server_addr)

            except Exception as e:
                print(f" L·ªói khi nh·∫≠n chunk {offset}: {e}")

            progress = min((offset + BUFFER_SIZE) / file_size * 100, 100)
            print(f" Ti·∫øn ƒë·ªô: {progress:.2f}%", end="\r", flush=True)

    total_time = time.time() - start_time
    speed = file_size / (1024 * 1024) / total_time
    print(f"\n T·∫£i ho√†n t·∫•t: {local_filename} trong {total_time:.2f} gi√¢y (~{speed:.2f} MB/s)")

if __name__ == "__main__":
    request_file_list()
    # Y√™u c·∫ßu Server g·ª≠i k√≠ch th∆∞·ªõc file
    file_size = get_file_size(client_socket, "1GB.bin", (SERVER_IP,PORT))
    if file_size:
        download_file(client_socket,"1GB.bin","Copy_1GB.bin",file_size,(SERVER_IP,PORT))
    else:
        print(" Kh√¥ng th·ªÉ t·∫£i file v√¨ kh√¥ng nh·∫≠n ƒë∆∞·ª£c k√≠ch th∆∞·ªõc.")
    client_socket.close()

import socket
import time
import os

# C·∫•u h√¨nh Client
SERVER_IP = "127.0.0.1"
PORT = 12345
BUFFER_SIZE = 64000
MAX_ATTEMPTS = 5    # S·ªë l·∫ßn th·ª≠ l·∫°i n·∫øu m·∫•t g√≥i
# T·∫°o UDP socket
client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
def get_file_size(client_socket, filename, server_addr):
    """ Y√™u c·∫ßu Server g·ª≠i k√≠ch th∆∞·ªõc file tr∆∞·ªõc khi t·∫£i """
    request = f"GET_FILE_SIZE:{filename}"
    client_socket.sendto(request.encode(), server_addr)

    try:
        client_socket.settimeout(3.0)  # Timeout 3 gi√¢y ƒë·ªÉ tr√°nh treo
        data, _ = client_socket.recvfrom(1024)
        if data.startswith(b"FILE_SIZE:"):
            return int(data.decode().split(":")[1])  # Tr·∫£ v·ªÅ k√≠ch th∆∞·ªõc file (bytes)
        else:
            print(f" L·ªói: Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ Server ({data.decode()})")
            return None
    except socket.timeout:
        print(" L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Server")
        return None

def request_file_list():
    """ Y√™u c·∫ßu danh s√°ch file t·ª´ Server """
    client_socket.sendto("LIST_FILES".encode(), (SERVER_IP, PORT))
    data, _ = client_socket.recvfrom(BUFFER_SIZE)
    print("Danh s√°ch file c√≥ s·∫µn:", data.decode())

def request_file_chunk(filename, offset, size):
    """ Y√™u c·∫ßu t·∫£i m·ªôt ph·∫ßn file t·ª´ Server """
    request = f"REQUEST_FILE:{filename}:{offset}:{size}"
    client_socket.sendto(request.encode(), (SERVER_IP, PORT))

    data, _ = client_socket.recvfrom(BUFFER_SIZE + size)
    return data

def download_file(client_socket, server_filename, local_filename, file_size, server_addr):
    """ T·∫£i file t·ª´ Server nh∆∞ng l∆∞u v·ªõi t√™n kh√°c tr√™n Client """
    print(f"üì• ƒêang t·∫£i {server_filename} ({file_size / (1024 * 1024):.2f} MB) v·ªÅ {local_filename}...")
    start_time = time.time()
    with open(local_filename, "wb") as output_file:
        for offset in range(0, file_size, BUFFER_SIZE):
            request = f"REQUEST_FILE:{server_filename}:{offset}:{BUFFER_SIZE}"
            client_socket.sendto(request.encode(), server_addr)

            try:
                chunk, _ = client_socket.recvfrom(BUFFER_SIZE + 256)

                if not chunk.startswith(b"FILE_CHUNK"):
                    raise ValueError(f" L·ªói: Chunk {offset} kh√¥ng h·ª£p l·ªá")

                parts = chunk.split(b":", 4)
                recv_offset = int(parts[2].decode())
                file_data = parts[4]

                output_file.seek(recv_offset)
                output_file.write(file_data)

                # G·ª≠i ACK x√°c nh·∫≠n
                ack = f"ACK:{server_filename}:{recv_offset}"
                client_socket.sendto(ack.encode(), server_addr)

            except Exception as e:
                print(f" L·ªói khi nh·∫≠n chunk {offset}: {e}")

            progress = min((offset + BUFFER_SIZE) / file_size * 100, 100)
            print(f" Ti·∫øn ƒë·ªô: {progress:.2f}%", end="\r", flush=True)

    total_time = time.time() - start_time
    speed = file_size / (1024 * 1024) / total_time
    print(f"\n T·∫£i ho√†n t·∫•t: {local_filename} trong {total_time:.2f} gi√¢y (~{speed:.2f} MB/s)")

if __name__ == "__main__":
    request_file_list()
    # Y√™u c·∫ßu Server g·ª≠i k√≠ch th∆∞·ªõc file
    file_size = get_file_size(client_socket, "100MB.bin", (SERVER_IP,PORT))
    if file_size:
        download_file(client_socket,"100MB.bin","Copy_1GB.bin",file_size,(SERVER_IP,PORT))
    else:
        print(" Kh√¥ng th·ªÉ t·∫£i file v√¨ kh√¥ng nh·∫≠n ƒë∆∞·ª£c k√≠ch th∆∞·ªõc.")
    client_socket.close()
